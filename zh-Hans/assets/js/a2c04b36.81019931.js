"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[5332],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>f});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?t.createElement(f,o(o({ref:r},p),{},{components:n})):t.createElement(f,o({ref:r},p))}));function f(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},53509:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});n(67294);var t=n(3905);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})),e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={sidebar_position:2,title:"\u56de\u8c03\u4f8b\u5b50",hide_title:!0},c=void 0,l={unversionedId:"webhooks/example",id:"webhooks/example",title:"\u56de\u8c03\u4f8b\u5b50",description:"\u7b80\u8981\u63cf\u8ff0",source:"@site/docs/restapi/webhooks/example.mdx",sourceDirName:"webhooks",slug:"/webhooks/example",permalink:"/zh-Hans/restapi/webhooks/example",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/example.mdx",tags:[],version:"current",lastUpdatedAt:1705924173,formattedLastUpdatedAt:"2024\u5e741\u670822\u65e5",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"\u56de\u8c03\u4f8b\u5b50",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"\u56de\u8c03\u8bf4\u660e",permalink:"/zh-Hans/restapi/webhooks/introduction"},next:{title:"\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4\u4e4b\u524d\u7684\u56de\u8c03",permalink:"/zh-Hans/restapi/webhooks/group/applyJoinGroupBefore"}},p={},u=[{value:"<strong>\u7b80\u8981\u63cf\u8ff0</strong>",id:"\u7b80\u8981\u63cf\u8ff0",level:3},{value:"\u6b65\u9aa4\u4e00 \u4fee\u6539\u914d\u7f6e\u6587\u4ef6",id:"\u6b65\u9aa4\u4e00-\u4fee\u6539\u914d\u7f6e\u6587\u4ef6",level:3},{value:"\u6b65\u9aa4\u4e8c \u521b\u5efa\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u5e76\u6307\u5b9a\u5176\u4e3a\u9ed8\u8ba4\u597d\u53cb",id:"\u6b65\u9aa4\u4e8c-\u521b\u5efa\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u5e76\u6307\u5b9a\u5176\u4e3a\u9ed8\u8ba4\u597d\u53cb",level:3},{value:"\u6b65\u9aa4\u4e09 \u7f16\u5199 <strong>afterSendSingleMsg</strong> \u63a5\u53e3",id:"\u6b65\u9aa4\u4e09-\u7f16\u5199-aftersendsinglemsg-\u63a5\u53e3",level:3},{value:"\u6b65\u9aa4\u56db \u4f53\u9a8c\u8be5\u529f\u80fd",id:"\u6b65\u9aa4\u56db-\u4f53\u9a8c\u8be5\u529f\u80fd",level:3}],m={toc:u},d="wrapper";function f(e){var{components:r}=e,s=o(e,["components"]);return(0,t.kt)(d,i(function(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{},t=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(t=t.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),t.forEach((function(r){a(e,r,n[r])}))}return e}({},m,s),{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h3",{id:"\u7b80\u8981\u63cf\u8ff0"},(0,t.kt)("strong",{parentName:"h3"},"\u7b80\u8981\u63cf\u8ff0")),(0,t.kt)("p",null,"\u4f7f\u7528 callback \u5b9e\u73b0\u5ba2\u670d\u673a\u5668\u4eba\u95ee\u7b54\u529f\u80fd\uff0c\u7ed9\u5ba2\u670d\u673a\u5668\u4eba\u53d1\u9001\u4e00\u6761\u6d88\u606f\u540e\uff08\u652f\u6301\u53d1\u9001\u6587\u672c\u6d88\u606f\u548c\u56fe\u7247\u6d88\u606f\uff09\uff0c\u5ba2\u670d\u673a\u5668\u4eba\u628a\u8fd9\u6761\u6d88\u606f\u8fd4\u56de\u3002"),(0,t.kt)("h3",{id:"\u6b65\u9aa4\u4e00-\u4fee\u6539\u914d\u7f6e\u6587\u4ef6"},"\u6b65\u9aa4\u4e00 \u4fee\u6539\u914d\u7f6e\u6587\u4ef6"),(0,t.kt)("p",null,"\u53c2\u7167\u5982\u4e0b\u6a21\u677f\u4fee\u6539 open-im-server \u4e2d\u7684 config/config.yaml \u914d\u7f6e"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"PC Web Interface",src:n(32997).Z,width:"349",height:"271"})),(0,t.kt)("p",null,"tips"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"url \u4e3a \u56de\u8c03 url")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"afterSendSingleMsg.enable \u4e3a true \u65f6\uff0c\u5f00\u542f\u8be5\u56de\u8c03")),(0,t.kt)("h3",{id:"\u6b65\u9aa4\u4e8c-\u521b\u5efa\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u5e76\u6307\u5b9a\u5176\u4e3a\u9ed8\u8ba4\u597d\u53cb"},"\u6b65\u9aa4\u4e8c \u521b\u5efa\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u5e76\u6307\u5b9a\u5176\u4e3a\u9ed8\u8ba4\u597d\u53cb"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u521b\u5efa\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\uff0c\u8bb0\u5f55\u8be5\u8d26\u53f7\u7684 ",(0,t.kt)("strong",{parentName:"p"},"userID"))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u767b\u5f55\u7ba1\u7406\u540e\u53f0\uff0c\u5c06\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u6dfb\u52a0\u4e3a\u9ed8\u8ba4\u597d\u53cb\n",(0,t.kt)("img",{alt:"PC Web Interface",src:n(6116).Z,width:"1885",height:"690"})))),(0,t.kt)("h3",{id:"\u6b65\u9aa4\u4e09-\u7f16\u5199-aftersendsinglemsg-\u63a5\u53e3"},"\u6b65\u9aa4\u4e09 \u7f16\u5199 ",(0,t.kt)("strong",{parentName:"h3"},"afterSendSingleMsg")," \u63a5\u53e3"),(0,t.kt)("p",null,"\u53c2\u8003\u4f8b\u5b50\u5982\u4e0b"),(0,t.kt)("p",null,"tips:"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"1\u3001\u5c06\u4f8b\u5b50\u4e2d\u7684 ",(0,t.kt)("strong",{parentName:"p"},"robotics")," \u66ff\u6362\u6210\u6b65\u9aa4\u4e8c\u4e2d\u83b7\u53d6\u7684 userID")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-Go"},'func (m *ChatApi) CallbackExample(c *gin.Context) {\n\n    // 1. Callback after sending a single chat message\n    var req apistruct.CallbackAfterSendSingleMsgReq\n\n    if err := c.BindJSON(&req); err != nil {\n        log.ZError(c, "CallbackExample BindJSON failed", err)\n        apiresp.GinError(c, errs.ErrArgs.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    resp := apistruct.CallbackAfterSendSingleMsgResp{\n        CommonCallbackResp: apistruct.CommonCallbackResp{\n            ActionCode: 0,\n            ErrCode:    200,\n            ErrMsg:     "success",\n            ErrDlt:     "successful",\n            NextCode:   0,\n        },\n    }\n    c.JSON(http.StatusOK, resp)\n\n    // 2. If the user receiving the message is a customer service bot, return the message.\n\n    // UserID of the robot account\n    robotics:="robotics"\n\n    if req.SendID == robotics || req.RecvID != robotics {\n        return\n    }\n\n    if req.ContentType != constant.Picture && req.ContentType != constant.Text {\n        return\n    }\n\n    // Administrator token\n    url := "http://127.0.0.1:10009/account/login"\n    adminID := config.Config.ChatAdmin[0].AdminID\n    paswd := md5.Sum([]byte(adminID))\n\n    admin_input := admin.LoginReq{\n        Account:  config.Config.ChatAdmin[0].AdminID,\n        Password: hex.EncodeToString(paswd[:]),\n    }\n\n    header := make(map[string]string, 2)\n    header["operationID"] = "111"\n\n    b, err := Post(c, url, header, admin_input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample send message failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    type TokenInfo struct {\n        ErrCode int                      `json:"errCode"`\n        ErrMsg  string                   `json:"errMsg"`\n        ErrDlt  string                   `json:"errDlt"`\n        Data    apistruct.AdminLoginResp `json:"data,omitempty"`\n    }\n\n    admin_output := &TokenInfo{}\n\n    if err = json.Unmarshal(b, admin_output); err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    header["token"] = admin_output.Data.AdminToken\n\n    url = "http://127.0.0.1:10008/user/find/public"\n\n    search_input := chat.FindUserFullInfoReq{\n        UserIDs: []string{robotics},\n    }\n\n    b, err = Post(c, url, header, search_input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    type UserInfo struct {\n        ErrCode int                       `json:"errCode"`\n        ErrMsg  string                    `json:"errMsg"`\n        ErrDlt  string                    `json:"errDlt"`\n        Data    chat.FindUserFullInfoResp `json:"data,omitempty"`\n    }\n\n    search_output := &UserInfo{}\n\n    if err = json.Unmarshal(b, search_output); err != nil {\n        log.ZError(c, "search_output unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    if len(search_output.Data.Users) == 0 {\n        apiresp.GinError(c, errs.ErrRecordNotFound.Wrap("the robotics not found"))\n        return\n    }\n\n    log.ZDebug(c, "callback", "searchUserAccount", search_output)\n\n    text := apistruct.TextElem{}\n    picture := apistruct.PictureElem{}\n    mapStruct := make(map[string]any)\n    // Processing text messages\n\n    if err != nil {\n        log.ZError(c, "CallbackExample get Sender failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    // Handle message structures\n    if req.ContentType == constant.Text {\n        err = json.Unmarshal([]byte(req.Content), &text)\n        if err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        log.ZDebug(c, "callback", "text", text)\n        mapStruct["content"] = text.Content\n    } else {\n        err = json.Unmarshal([]byte(req.Content), &picture)\n        if err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        log.ZDebug(c, "callback", "text", picture)\n        if strings.Contains(picture.SourcePicture.Type, "/") {\n            arr := strings.Split(picture.SourcePicture.Type, "/")\n            picture.SourcePicture.Type = arr[1]\n        }\n\n        if strings.Contains(picture.BigPicture.Type, "/") {\n            arr := strings.Split(picture.BigPicture.Type, "/")\n            picture.BigPicture.Type = arr[1]\n        }\n\n        if len(picture.SnapshotPicture.Type) == 0 {\n            picture.SnapshotPicture.Type = picture.SourcePicture.Type\n        }\n\n        mapStructSnap := make(map[string]interface{})\n        if mapStructSnap, err = convertStructToMap(picture.SnapshotPicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["snapshotPicture"] = mapStructSnap\n\n        mapStructBig := make(map[string]interface{})\n        if mapStructBig, err = convertStructToMap(picture.BigPicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["bigPicture"] = mapStructBig\n\n        mapStructSource := make(map[string]interface{})\n        if mapStructSource, err = convertStructToMap(picture.SourcePicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["sourcePicture"] = mapStructSource\n        mapStruct["sourcePath"] = picture.SourcePath\n    }\n\n    log.ZDebug(c, "callback", "mapStruct", mapStruct, "mapStructSnap")\n    header["token"] = admin_output.Data.ImToken\n\n    input := &apistruct.SendMsgReq{\n        RecvID: req.SendID,\n        SendMsg: apistruct.SendMsg{\n            SendID:           search_output.Data.Users[0].UserID,\n            SenderNickname:   search_output.Data.Users[0].Nickname,\n            SenderFaceURL:    search_output.Data.Users[0].FaceURL,\n            SenderPlatformID: req.SenderPlatformID,\n            Content:          mapStruct,\n            ContentType:      req.ContentType,\n            SessionType:      req.SessionType,\n            SendTime:         utils.GetCurrentTimestampByMill(), // millisecond\n        },\n    }\n\n    url = "http://127.0.0.1:10002/msg/send_msg"\n\n    type sendResp struct {\n        ErrCode int             `json:"errCode"`\n        ErrMsg  string          `json:"errMsg"`\n        ErrDlt  string          `json:"errDlt"`\n        Data    msg.SendMsgResp `json:"data,omitempty"`\n    }\n\n    output := &sendResp{}\n\n    // Initiate a post request that calls the interface that sends the message (the bot sends a message to user)\n    b, err = Post(c, url, header, input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample send message failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n    if err = json.Unmarshal(b, output); err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n    res := &msg.SendMsgResp{\n        ServerMsgID: output.Data.ServerMsgID,\n        ClientMsgID: output.Data.ClientMsgID,\n        SendTime:    output.Data.SendTime,\n    }\n\n    apiresp.GinSuccess(c, res)\n}\n\n// struct to map\nfunc convertStructToMap(input interface{}) (map[string]interface{}, error) {\n    result := make(map[string]interface{})\n    inputType := reflect.TypeOf(input)\n\n    inputValue := reflect.ValueOf(input)\n\n    if inputType.Kind() != reflect.Struct {\n        return nil, errs.ErrArgs.Wrap("input is not a struct")\n    }\n\n    for i := 0; i < inputType.NumField(); i++ {\n        field := inputType.Field(i)\n        fieldValue := inputValue.Field(i)\n\n        mapKey := field.Tag.Get("mapstructure")\n        fmt.Println(mapKey)\n\n        if mapKey == "" {\n            mapKey = field.Name\n        }\n\n        mapKey = strings.ToLower(mapKey)\n\n        result[mapKey] = fieldValue.Interface()\n    }\n\n    return result, nil\n}\n\n// Send a POST request\nfunc Post(ctx context.Context, url string, header map[string]string, data any, timeout int) (content []byte, err error) {\n    var (\n        // define http client.\n        client = &http.Client{\n            Timeout: 15 * time.Second, // max timeout is 15s\n        }\n    )\n\n    if timeout > 0 {\n        var cancel func()\n        ctx, cancel = context.WithTimeout(ctx, time.Second*time.Duration(timeout))\n        defer cancel()\n    }\n\n    jsonStr, err := json.Marshal(data)\n    if err != nil {\n        return nil, err\n    }\n\n    req, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewBuffer(jsonStr))\n    if err != nil {\n        return nil, err\n    }\n\n    if operationID, _ := ctx.Value(constant.OperationID).(string); operationID != "" {\n        req.Header.Set(constant.OperationID, operationID)\n    }\n    for k, v := range header {\n        req.Header.Set(k, v)\n    }\n    req.Header.Add("content-type", "application/json; charset=utf-8")\n\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n\n    result, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return nil, err\n    }\n\n    return result, nil\n}\n\n\n')),(0,t.kt)("h3",{id:"\u6b65\u9aa4\u56db-\u4f53\u9a8c\u8be5\u529f\u80fd"},"\u6b65\u9aa4\u56db \u4f53\u9a8c\u8be5\u529f\u80fd"),(0,t.kt)("p",null,"1\u3001\u767b\u5f55\u6210\u529f\u53ef\u4ee5\u7ed9\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\u53d1\u9001\u6d88\u606f\u548c\u56fe\u7247"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"PC Web Interface",src:n(40338).Z,width:"588",height:"607"})))}f.isMDXComponent=!0},32997:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/config-c8a51d2b07b4a2f6fc5256170d63bf13.png"},6116:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/defaultFriend-51de9990f35a694d9f39c23a2f0124a3.png"},40338:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/result-015cb7338598a6182110ee75ccdbb9e8.png"}}]);
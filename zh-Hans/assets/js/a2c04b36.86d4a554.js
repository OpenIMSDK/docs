"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[5332],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),g=a,f=u["".concat(c,".").concat(g)]||u[g]||m[g]||i;return t?n.createElement(f,o(o({ref:r},p),{},{components:t})):n.createElement(f,o({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},53509:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});t(67294);var n=t(3905);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={sidebar_position:2,title:"\u56de\u8c03\u4f8b\u5b50",hide_title:!0},c=void 0,l={unversionedId:"webhooks/example",id:"webhooks/example",title:"\u56de\u8c03\u4f8b\u5b50",description:"\u7b80\u8981\u63cf\u8ff0",source:"@site/docs/restapi/webhooks/example.mdx",sourceDirName:"webhooks",slug:"/webhooks/example",permalink:"/zh-Hans/restapi/webhooks/example",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/example.mdx",tags:[],version:"current",lastUpdatedAt:1705572929,formattedLastUpdatedAt:"2024\u5e741\u670818\u65e5",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"\u56de\u8c03\u4f8b\u5b50",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"\u56de\u8c03\u8bf4\u660e",permalink:"/zh-Hans/restapi/webhooks/introduction"},next:{title:"\u7533\u8bf7\u52a0\u5165\u7fa4\u7ec4\u4e4b\u524d\u7684\u56de\u8c03",permalink:"/zh-Hans/restapi/webhooks/group/applyJoinGroupBefore"}},p={},u=[{value:"<strong>\u7b80\u8981\u63cf\u8ff0</strong>",id:"\u7b80\u8981\u63cf\u8ff0",level:3},{value:"\u6b65\u9aa4\u4e00 \u4fee\u6539\u914d\u7f6e\u6587\u4ef6",id:"\u6b65\u9aa4\u4e00-\u4fee\u6539\u914d\u7f6e\u6587\u4ef6",level:3},{value:"\u6b65\u9aa4\u4e8c \u521b\u5efa\u5ba2\u670d\u8d26\u53f7\u83b7\u53d6\u7ba1\u7406\u5458 token",id:"\u6b65\u9aa4\u4e8c-\u521b\u5efa\u5ba2\u670d\u8d26\u53f7\u83b7\u53d6\u7ba1\u7406\u5458-token",level:3},{value:"\u6b65\u9aa4\u4e09 \u7f16\u5199 <strong>afterSendSingleMsg</strong> \u63a5\u53e3",id:"\u6b65\u9aa4\u4e09-\u7f16\u5199-aftersendsinglemsg-\u63a5\u53e3",level:3},{value:"\u6b65\u9aa4\u56db \u4f53\u9a8c\u8be5\u529f\u80fd",id:"\u6b65\u9aa4\u56db-\u4f53\u9a8c\u8be5\u529f\u80fd",level:3}],m={toc:u},g="wrapper";function f(e){var{components:r}=e,s=o(e,["components"]);return(0,n.kt)(g,i(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){a(e,r,t[r])}))}return e}({},m,s),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"\u7b80\u8981\u63cf\u8ff0"},(0,n.kt)("strong",{parentName:"h3"},"\u7b80\u8981\u63cf\u8ff0")),(0,n.kt)("p",null,"\u4f7f\u7528 callback \u5b9e\u73b0\u5ba2\u670d\u673a\u5668\u4eba\u95ee\u7b54\u529f\u80fd\uff0c\u4ee5\u7ed9\u8be5\u5ba2\u670d\u673a\u5668\u4eba\u53d1\u9001\u4e00\u6761\u6d88\u606f\uff08\u652f\u6301\u53d1\u9001\u6587\u672c\u6d88\u606f\u548c\u56fe\u7247\u6d88\u606f\uff09\uff0c\u5ba2\u670d\u673a\u5668\u4eba\u628a\u8fd9\u6761\u6d88\u606f\u8fd4\u56de\u4e3a\u4f8b\u3002"),(0,n.kt)("h3",{id:"\u6b65\u9aa4\u4e00-\u4fee\u6539\u914d\u7f6e\u6587\u4ef6"},"\u6b65\u9aa4\u4e00 \u4fee\u6539\u914d\u7f6e\u6587\u4ef6"),(0,n.kt)("p",null,"\u53c2\u7167\u5982\u4e0b\u6a21\u677f\u4fee\u6539 open-im-server \u4e2d\u7684 config/config.yaml \u914d\u7f6e"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:t(32997).Z,width:"349",height:"271"})),(0,n.kt)("p",null,"tips"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"url \u4e3a \u56de\u8c03 url")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"afterSendSingleMsg.enable \u4e3a true \u65f6\uff0c\u5f00\u542f\u8be5\u56de\u8c03")),(0,n.kt)("h3",{id:"\u6b65\u9aa4\u4e8c-\u521b\u5efa\u5ba2\u670d\u8d26\u53f7\u83b7\u53d6\u7ba1\u7406\u5458-token"},"\u6b65\u9aa4\u4e8c \u521b\u5efa\u5ba2\u670d\u8d26\u53f7\u83b7\u53d6\u7ba1\u7406\u5458 token"),(0,n.kt)("p",null,"\u6210\u529f\u90e8\u7f72 ",(0,n.kt)("strong",{parentName:"p"},"openIM")," \u540e\uff0c\u6ce8\u518c\u4e00\u4e2a openIM \u8d26\u53f7\uff0c\u6307\u5b9a\u8be5\u8d26\u53f7\u4e3a\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\uff0c\u8bb0\u5f55\u5176 ",(0,n.kt)("strong",{parentName:"p"},"userID")," \u4e3a ",(0,n.kt)("strong",{parentName:"p"},"robotics"),"\n\u901a\u8fc7 ",(0,n.kt)("strong",{parentName:"p"},"Postman")," \u6216\u5176\u4ed6\u63a5\u53e3\u6d4b\u8bd5\u5de5\u5177\uff0c\u8c03\u7528 ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"http://xx.xx.xx.xx:10009/account/login"},"http://xx.xx.xx.xx:10009/account/login"))," \u63a5\u53e3\uff0c\u8bb0\u5f55\u8fd4\u56de\u7684 ",(0,n.kt)("strong",{parentName:"p"},"imToken")),(0,n.kt)("h3",{id:"\u6b65\u9aa4\u4e09-\u7f16\u5199-aftersendsinglemsg-\u63a5\u53e3"},"\u6b65\u9aa4\u4e09 \u7f16\u5199 ",(0,n.kt)("strong",{parentName:"h3"},"afterSendSingleMsg")," \u63a5\u53e3"),(0,n.kt)("p",null,"\u53c2\u8003\u4f8b\u5b50\u5982\u4e0b"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Go"},'func (m *MessageApi) CallbackExample(c *gin.Context) {\n    // 1. Callback after sending a single chat message\n    var req callbackstruct.CallbackAfterSendSingleMsgReq\n\n    if err := c.BindJSON(&req); err != nil {\n        log.ZError(c, "CallbackExample BindJSON failed", err)\n        apiresp.GinError(c, errs.ErrArgs.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    resp := callbackstruct.CallbackAfterSendSingleMsgResp{\n        CommonCallbackResp: callbackstruct.CommonCallbackResp{\n            ActionCode: 0,\n            ErrCode:    200,\n            ErrMsg:     "success",\n            ErrDlt:     "successful",\n            NextCode:   0,\n        },\n    }\n    c.JSON(http.StatusOK, resp)\n\n    // 2. If the user receiving the message is a customer service bot, return the message.\n\n    // UserID of the robot account\n    robotics := "5078764102"\n    // Administrator token\n    imtoken := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOiJpbUFkbWluIiwiUGxhdGZvcm1JRCI6MTAsImV4cCI6MTcxMzI1MjI0OSwibmJmIjoxNzA1NDc1OTQ5LCJpYXQiOjE3MDU0NzYyNDl9.Zi-uFre8zq6msT3mFOumgcfNKBJ92kTw9ewsKeRVbZ4"\n    if req.SendID == robotics {\n        return\n    }\n    // Processing text messages\n    if req.ContentType == constant.Picture || req.ContentType == constant.Text {\n        user, err := m.userRpcClient.GetUserInfo(c, robotics)\n        if err != nil {\n            log.ZError(c, "CallbackExample get Sender failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n\n        // Handle message structures\n        text := apistruct.TextElem{}\n        picture := apistruct.PictureElem{}\n        mapStruct := make(map[string]any)\n        if req.ContentType == constant.Text {\n            err = json.Unmarshal([]byte(req.Content), &text)\n            if err != nil {\n                log.ZError(c, "CallbackExample unmarshal failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            log.ZDebug(c, "callback", "text", text)\n            mapStruct["content"] = text.Content\n        } else {\n            err = json.Unmarshal([]byte(req.Content), &picture)\n            if err != nil {\n                log.ZError(c, "CallbackExample unmarshal failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            log.ZDebug(c, "callback", "text", picture)\n            if strings.Contains(picture.SourcePicture.Type, "/") {\n                arr := strings.Split(picture.SourcePicture.Type, "/")\n                picture.SourcePicture.Type = arr[1]\n            }\n\n            if strings.Contains(picture.BigPicture.Type, "/") {\n                arr := strings.Split(picture.BigPicture.Type, "/")\n                picture.BigPicture.Type = arr[1]\n            }\n\n            if len(picture.SnapshotPicture.Type) == 0 {\n                picture.SnapshotPicture.Type = picture.SourcePicture.Type\n            }\n\n            mapStructSnap, err := convertStructToMap(picture.SnapshotPicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["snapshotPicture"] = mapStructSnap\n\n            mapStructBig, err := convertStructToMap(picture.BigPicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["bigPicture"] = mapStructBig\n\n            mapStructSource, err := convertStructToMap(picture.SourcePicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["sourcePicture"] = mapStructSource\n            mapStruct["sourcePath"] = picture.SourcePath\n        }\n\n        log.ZDebug(c, "callback", "mapStruct", mapStruct)\n\n        input := &apistruct.SendMsgReq{\n            RecvID: req.SendID,\n            SendMsg: apistruct.SendMsg{\n                SendID:           user.UserID,\n                SenderNickname:   user.Nickname,\n                SenderFaceURL:    user.FaceURL,\n                SenderPlatformID: req.SenderPlatformID,\n                Content:          mapStruct,\n                ContentType:      req.ContentType,\n                SessionType:      req.SessionType,\n                SendTime:         utils.GetCurrentTimestampByMill(), // millisecond\n            },\n        }\n\n        url := "http://127.0.0.1:10002/msg/send_msg"\n        header := make(map[string]string, 2)\n        header["token"] = imtoken\n        type sendResp struct {\n            ErrCode int               `json:"errCode"`\n            ErrMsg  string            `json:"errMsg"`\n            ErrDlt  string            `json:"errDlt"`\n            Data    pbmsg.SendMsgResp `json:"data,omitempty"`\n        }\n\n        output := &sendResp{}\n\n        // Initiate a post request that calls the interface that sends the message (the bot sends a message to user)\n        b, err := http2.Post(c, url, header, input, 10)\n        if err != nil {\n            log.ZError(c, "CallbackExample send message failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        if err = json.Unmarshal(b, output); err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        res := &msg.SendMsgResp{\n            ServerMsgID: output.Data.ServerMsgID,\n            ClientMsgID: output.Data.ClientMsgID,\n            SendTime:    output.Data.SendTime,\n        }\n\n        apiresp.GinSuccess(c, res)\n    }\n}\n\n// struct to map\nfunc convertStructToMap(input interface{}) (map[string]interface{}, error) {\n    result := make(map[string]interface{})\n    inputType := reflect.TypeOf(input)\n\n    inputValue := reflect.ValueOf(input)\n\n    if inputType.Kind() != reflect.Struct {\n        return nil, errs.ErrArgs.Wrap("Input is not a struct")\n    }\n\n    for i := 0; i < inputType.NumField(); i++ {\n        field := inputType.Field(i)\n        fieldValue := inputValue.Field(i)\n\n        mapKey := field.Tag.Get("mapstructure")\n        fmt.Println(mapKey)\n\n        if mapKey == "" {\n            mapKey = field.Name\n        }\n\n        mapKey = strings.ToLower(mapKey)\n\n        result[mapKey] = fieldValue.Interface()\n    }\n\n    return result, nil\n}\n\n')),(0,n.kt)("p",null,"tips:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"1\u3001\u5c06\u4f8b\u5b50\u4e2d\u7684 ",(0,n.kt)("strong",{parentName:"p"},"robotics")," \u66ff\u6362\u6210\u6b65\u9aa4\u4e8c\u4e2d\u83b7\u53d6\u7684 ",(0,n.kt)("strong",{parentName:"p"},"robotics"))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"2\u3001\u5c06\u4f8b\u5b50\u4e2d\u7684 ",(0,n.kt)("strong",{parentName:"p"},"imToken")," \u66ff\u6362\u6210\u6b65\u9aa4\u4e8c\u4e2d\u83b7\u53d6\u7684 ",(0,n.kt)("strong",{parentName:"p"},"imToken"))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"3\u3001\u5c06\u4f8b\u5b50\u4e2d\u7684 ",(0,n.kt)("strong",{parentName:"p"},"url")," \u66ff\u6362\u6210\u771f\u5b9e\u7684 ",(0,n.kt)("strong",{parentName:"p"},"url"))),(0,n.kt)("h3",{id:"\u6b65\u9aa4\u56db-\u4f53\u9a8c\u8be5\u529f\u80fd"},"\u6b65\u9aa4\u56db \u4f53\u9a8c\u8be5\u529f\u80fd"),(0,n.kt)("p",null,"1\u3001\u76f4\u63a5\u901a\u8fc7 userID \u641c\u7d22\u5ba2\u670d\u673a\u5668\u4eba\u8d26\u53f7\uff0c\u7136\u540e\u7ed9\u5ba2\u670d\u673a\u5668\u4eba\u53d1\u9001\u6d88\u606f"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:t(2981).Z,width:"441",height:"592"})),(0,n.kt)("p",null,"2\u3001\u5ba2\u670d\u673a\u5668\u4eba\u6536\u5230\u6d88\u606f\u540e\uff0c\u5c06\u8be5\u6d88\u606f\u8fd4\u56de"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:t(40338).Z,width:"588",height:"607"})))}f.isMDXComponent=!0},32997:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/config-c8a51d2b07b4a2f6fc5256170d63bf13.png"},40338:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/result-015cb7338598a6182110ee75ccdbb9e8.png"},2981:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/sendMessage-f8bcb35e47896a3dd39d87369780bb8d.png"}}]);
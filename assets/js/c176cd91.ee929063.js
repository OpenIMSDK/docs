"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[31280],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(f,o(o({ref:r},p),{},{components:t})):n.createElement(f,o({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},67227:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});t(67294);var n=t(3905);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={sidebar_position:2,title:"callback example",hide_title:!0},c=void 0,l={unversionedId:"webhooks/example",id:"webhooks/example",title:"callback example",description:"brief description",source:"@site/i18n/en/docusaurus-plugin-content-docs-restapi/current/webhooks/example.mdx",sourceDirName:"webhooks",slug:"/webhooks/example",permalink:"/restapi/webhooks/example",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/example.mdx",tags:[],version:"current",lastUpdatedAt:1705925484,formattedLastUpdatedAt:"Jan 22, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"callback example",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Callback Description",permalink:"/restapi/webhooks/introduction"},next:{title:"Callback Before a User Joins a Group",permalink:"/restapi/webhooks/group/applyJoinGroupBefore"}},p={},u=[{value:"<strong>brief description</strong>",id:"brief-description",level:3},{value:"Step 1 Modify the configuration file",id:"step-1-modify-the-configuration-file",level:3},{value:"Step 2 Create a customer service robot account and designate it as a default friend",id:"step-2-create-a-customer-service-robot-account-and-designate-it-as-a-default-friend",level:3},{value:"Step 3 Write the <strong>afterSendSingleMsg</strong> interface",id:"step-3-write-the-aftersendsinglemsg-interface",level:3},{value:"Step 4 Experience the feature",id:"step-4-experience-the-feature",level:3}],d={toc:u},m="wrapper";function f(e){var{components:r}=e,s=o(e,["components"]);return(0,n.kt)(m,i(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){a(e,r,t[r])}))}return e}({},d,s),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"brief-description"},(0,n.kt)("strong",{parentName:"h3"},"brief description")),(0,n.kt)("p",null,"Use callback to realize the customer service robot question and answer function, send a message to the customer service robot (support to send text messages and image messages), the customer service robot to return this message."),(0,n.kt)("h3",{id:"step-1-modify-the-configuration-file"},"Step 1 Modify the configuration file"),(0,n.kt)("p",null,"Modify the config/config.yaml configuration in open-im-server by referring to the following template"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:t(58295).Z,width:"349",height:"271"})),(0,n.kt)("p",null,"tips"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"url is callback url")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"If afterSendSingleMsg.enable is true, the callback is enabled.")),(0,n.kt)("h3",{id:"step-2-create-a-customer-service-robot-account-and-designate-it-as-a-default-friend"},"Step 2 Create a customer service robot account and designate it as a default friend"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a customer service bot account and record the ",(0,n.kt)("strong",{parentName:"p"},"userID")," of the account")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Log in to the admin backend and add the customer service bot account as a default friend\n",(0,n.kt)("img",{alt:"PC Web Interface",src:t(88640).Z,width:"1885",height:"690"})))),(0,n.kt)("h3",{id:"step-3-write-the-aftersendsinglemsg-interface"},"Step 3 Write the ",(0,n.kt)("strong",{parentName:"h3"},"afterSendSingleMsg")," interface"),(0,n.kt)("p",null,"Reference examples are as follows"),(0,n.kt)("p",null,"tips:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"1\u3001Replace ",(0,n.kt)("strong",{parentName:"p"},"robotics")," in the example with the userID obtained in step 2")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Go"},'func (m *ChatApi) CallbackExample(c *gin.Context) {\n\n    // 1. Callback after sending a single chat message\n    var req apistruct.CallbackAfterSendSingleMsgReq\n\n    if err := c.BindJSON(&req); err != nil {\n        log.ZError(c, "CallbackExample BindJSON failed", err)\n        apiresp.GinError(c, errs.ErrArgs.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    resp := apistruct.CallbackAfterSendSingleMsgResp{\n        CommonCallbackResp: apistruct.CommonCallbackResp{\n            ActionCode: 0,\n            ErrCode:    200,\n            ErrMsg:     "success",\n            ErrDlt:     "successful",\n            NextCode:   0,\n        },\n    }\n    c.JSON(http.StatusOK, resp)\n\n    // 2. If the user receiving the message is a customer service bot, return the message.\n\n    // UserID of the robot account\n    robotics:="robotics"\n\n    if req.SendID == robotics || req.RecvID != robotics {\n        return\n    }\n\n    if req.ContentType != constant.Picture && req.ContentType != constant.Text {\n        return\n    }\n\n    // Administrator token\n    url := "http://127.0.0.1:10009/account/login"\n    adminID := config.Config.ChatAdmin[0].AdminID\n    paswd := md5.Sum([]byte(adminID))\n\n    admin_input := admin.LoginReq{\n        Account:  config.Config.ChatAdmin[0].AdminID,\n        Password: hex.EncodeToString(paswd[:]),\n    }\n\n    header := make(map[string]string, 2)\n    header["operationID"] = "111"\n\n    b, err := Post(c, url, header, admin_input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample send message failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    type TokenInfo struct {\n        ErrCode int                      `json:"errCode"`\n        ErrMsg  string                   `json:"errMsg"`\n        ErrDlt  string                   `json:"errDlt"`\n        Data    apistruct.AdminLoginResp `json:"data,omitempty"`\n    }\n\n    admin_output := &TokenInfo{}\n\n    if err = json.Unmarshal(b, admin_output); err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    header["token"] = admin_output.Data.AdminToken\n\n    url = "http://127.0.0.1:10008/user/find/public"\n\n    search_input := chat.FindUserFullInfoReq{\n        UserIDs: []string{robotics},\n    }\n\n    b, err = Post(c, url, header, search_input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    type UserInfo struct {\n        ErrCode int                       `json:"errCode"`\n        ErrMsg  string                    `json:"errMsg"`\n        ErrDlt  string                    `json:"errDlt"`\n        Data    chat.FindUserFullInfoResp `json:"data,omitempty"`\n    }\n\n    search_output := &UserInfo{}\n\n    if err = json.Unmarshal(b, search_output); err != nil {\n        log.ZError(c, "search_output unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    if len(search_output.Data.Users) == 0 {\n        apiresp.GinError(c, errs.ErrRecordNotFound.Wrap("the robotics not found"))\n        return\n    }\n\n    log.ZDebug(c, "callback", "searchUserAccount", search_output)\n\n    text := apistruct.TextElem{}\n    picture := apistruct.PictureElem{}\n    mapStruct := make(map[string]any)\n    // Processing text messages\n\n    if err != nil {\n        log.ZError(c, "CallbackExample get Sender failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    // Handle message structures\n    if req.ContentType == constant.Text {\n        err = json.Unmarshal([]byte(req.Content), &text)\n        if err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        log.ZDebug(c, "callback", "text", text)\n        mapStruct["content"] = text.Content\n    } else {\n        err = json.Unmarshal([]byte(req.Content), &picture)\n        if err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        log.ZDebug(c, "callback", "text", picture)\n        if strings.Contains(picture.SourcePicture.Type, "/") {\n            arr := strings.Split(picture.SourcePicture.Type, "/")\n            picture.SourcePicture.Type = arr[1]\n        }\n\n        if strings.Contains(picture.BigPicture.Type, "/") {\n            arr := strings.Split(picture.BigPicture.Type, "/")\n            picture.BigPicture.Type = arr[1]\n        }\n\n        if len(picture.SnapshotPicture.Type) == 0 {\n            picture.SnapshotPicture.Type = picture.SourcePicture.Type\n        }\n\n        mapStructSnap := make(map[string]interface{})\n        if mapStructSnap, err = convertStructToMap(picture.SnapshotPicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["snapshotPicture"] = mapStructSnap\n\n        mapStructBig := make(map[string]interface{})\n        if mapStructBig, err = convertStructToMap(picture.BigPicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["bigPicture"] = mapStructBig\n\n        mapStructSource := make(map[string]interface{})\n        if mapStructSource, err = convertStructToMap(picture.SourcePicture); err != nil {\n            log.ZError(c, "CallbackExample struct to map failed", err)\n            apiresp.GinError(c, err)\n            return\n        }\n        mapStruct["sourcePicture"] = mapStructSource\n        mapStruct["sourcePath"] = picture.SourcePath\n    }\n\n    log.ZDebug(c, "callback", "mapStruct", mapStruct, "mapStructSnap")\n    header["token"] = admin_output.Data.ImToken\n\n    input := &apistruct.SendMsgReq{\n        RecvID: req.SendID,\n        SendMsg: apistruct.SendMsg{\n            SendID:           search_output.Data.Users[0].UserID,\n            SenderNickname:   search_output.Data.Users[0].Nickname,\n            SenderFaceURL:    search_output.Data.Users[0].FaceURL,\n            SenderPlatformID: req.SenderPlatformID,\n            Content:          mapStruct,\n            ContentType:      req.ContentType,\n            SessionType:      req.SessionType,\n            SendTime:         utils.GetCurrentTimestampByMill(), // millisecond\n        },\n    }\n\n    url = "http://127.0.0.1:10002/msg/send_msg"\n\n    type sendResp struct {\n        ErrCode int             `json:"errCode"`\n        ErrMsg  string          `json:"errMsg"`\n        ErrDlt  string          `json:"errDlt"`\n        Data    msg.SendMsgResp `json:"data,omitempty"`\n    }\n\n    output := &sendResp{}\n\n    // Initiate a post request that calls the interface that sends the message (the bot sends a message to user)\n    b, err = Post(c, url, header, input, 10)\n    if err != nil {\n        log.ZError(c, "CallbackExample send message failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n    if err = json.Unmarshal(b, output); err != nil {\n        log.ZError(c, "CallbackExample unmarshal failed", err)\n        apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n        return\n    }\n    res := &msg.SendMsgResp{\n        ServerMsgID: output.Data.ServerMsgID,\n        ClientMsgID: output.Data.ClientMsgID,\n        SendTime:    output.Data.SendTime,\n    }\n\n    apiresp.GinSuccess(c, res)\n}\n\n// struct to map\nfunc convertStructToMap(input interface{}) (map[string]interface{}, error) {\n    result := make(map[string]interface{})\n    inputType := reflect.TypeOf(input)\n\n    inputValue := reflect.ValueOf(input)\n\n    if inputType.Kind() != reflect.Struct {\n        return nil, errs.ErrArgs.Wrap("input is not a struct")\n    }\n\n    for i := 0; i < inputType.NumField(); i++ {\n        field := inputType.Field(i)\n        fieldValue := inputValue.Field(i)\n\n        mapKey := field.Tag.Get("mapstructure")\n        fmt.Println(mapKey)\n\n        if mapKey == "" {\n            mapKey = field.Name\n        }\n\n        mapKey = strings.ToLower(mapKey)\n\n        result[mapKey] = fieldValue.Interface()\n    }\n\n    return result, nil\n}\n\n// Send a POST request\nfunc Post(ctx context.Context, url string, header map[string]string, data any, timeout int) (content []byte, err error) {\n    var (\n        // define http client.\n        client = &http.Client{\n            Timeout: 15 * time.Second, // max timeout is 15s\n        }\n    )\n\n    if timeout > 0 {\n        var cancel func()\n        ctx, cancel = context.WithTimeout(ctx, time.Second*time.Duration(timeout))\n        defer cancel()\n    }\n\n    jsonStr, err := json.Marshal(data)\n    if err != nil {\n        return nil, err\n    }\n\n    req, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewBuffer(jsonStr))\n    if err != nil {\n        return nil, err\n    }\n\n    if operationID, _ := ctx.Value(constant.OperationID).(string); operationID != "" {\n        req.Header.Set(constant.OperationID, operationID)\n    }\n    for k, v := range header {\n        req.Header.Set(k, v)\n    }\n    req.Header.Add("content-type", "application/json; charset=utf-8")\n\n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n\n    result, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return nil, err\n    }\n\n    return result, nil\n}\n\n\n')),(0,n.kt)("h3",{id:"step-4-experience-the-feature"},"Step 4 Experience the feature"),(0,n.kt)("p",null,"1\u3001Successful login can send messages and pictures to the customer service robot account"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:t(61433).Z,width:"588",height:"607"})),(0,n.kt)("p",null,"Help me translate the above document into English, and only need to reply with the translated text, and do not add unnecessary content before and after the reply."))}f.isMDXComponent=!0},58295:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/config-c8a51d2b07b4a2f6fc5256170d63bf13.png"},88640:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/defaultFriend-51de9990f35a694d9f39c23a2f0124a3.png"},61433:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/result-015cb7338598a6182110ee75ccdbb9e8.png"}}]);
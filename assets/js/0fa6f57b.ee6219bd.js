"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[67610],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),l=c(t),m=i,f=l["".concat(s,".").concat(m)]||l[m]||u[m]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[l]="string"==typeof e?e:i,a[1]=d;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},68557:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>d,metadata:()=>c,toc:()=>l});t(67294);var r=t(3905);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const d={title:"React Native",hide_title:!0,sidebar_position:4},s=void 0,c={unversionedId:"quickstart/reactNative",id:"quickstart/reactNative",title:"React Native",description:"\ud83d\ude80Using Demo",source:"@site/i18n/en/docusaurus-plugin-content-docs-sdks/current/quickstart/reactNative.mdx",sourceDirName:"quickstart",slug:"/quickstart/reactNative",permalink:"/sdks/quickstart/reactNative",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/sdks/quickstart/reactNative.mdx",tags:[],version:"current",lastUpdatedAt:1705566485,formattedLastUpdatedAt:"Jan 18, 2024",sidebarPosition:4,frontMatter:{title:"React Native",hide_title:!0,sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Flutter",permalink:"/sdks/quickstart/flutter"},next:{title:"Browser",permalink:"/sdks/quickstart/browser"}},p={},l=[{value:"\ud83d\ude80Using Demo",id:"using-demo",level:2},{value:"2.  Import Package",id:"2--import-package",level:3},{value:"3. Initialization",id:"3-initialization",level:3},{value:"4. Setting Listeners",id:"4-setting-listeners",level:3}],u={toc:l},m="wrapper";function f(e){var{components:n}=e,t=a(e,["components"]);return(0,r.kt)(m,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){i(e,n,t[n])}))}return e}({},u,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"using-demo"},"\ud83d\ude80Using Demo"),(0,r.kt)("p",null,"We strongly recommend that you first run the framework-related example  ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenIMSDK/Open-IM-PC-Web-Demo"},"DEMO"),"  we prepared for you. This will not only give you an intuitive experience of OpenIMSDK's capabilities, but will also help you quickly locate and solve problems during the actual integration process."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The project has just started and is still being updated, those in urgent need of functionality will need to add it themselves.")),(0,r.kt)("h3",{id:"2--import-package"},"2.  Import Package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  import OpenIMSDKRN from "open-im-sdk-rn";\n')),(0,r.kt)("h3",{id:"3-initialization"},"3. Initialization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    const Init = async () => {\n      await RNFS.mkdir(RNFS.DocumentDirectoryPath + '/tmp');\n      const config = {\n        platformID: platform,\n        apiAddr: API_URL,\n        wsAddr: WS_URL,\n\n        dataDir: RNFS.DocumentDirectoryPath + '/tmp',\n        logLevel: 6,\n        isLogStandardOutput: true,\n      };\n      try {\n        const opid = \"123456\";\n        const result = await OpenIMSDKRN.initSDK(config, opid);\n\n      } catch (error) {\n        console.error('Error initializing SDK:', error); // Log the error\n      }\n    };\n    const checkLogin = async () => {\n      const status = (await GetLoginStatus()).status;\n      if (status == 3){\n        setIsLoggedIn(true)\n        initStore()\n      }\n        \n    }\n")),(0,r.kt)("h3",{id:"4-setting-listeners"},"4. Setting Listeners"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    const setIMListener = () => {\n        \n        // account\n        OpenIMEmitter.addListener('onSelfInfoUpdated', (v) => { selfUpdateHandler });\n        OpenIMEmitter.addListener('onConnecting', connectingHandler);\n        OpenIMEmitter.addListener('onConnectFailed', connectFailedHandler);\n        OpenIMEmitter.addListener('onConnectSuccess', connectSuccessHandler);\n        OpenIMEmitter.addListener('onKickedOffline', (v) => { kickHandler });\n        OpenIMEmitter.addListener('onUserTokenExpired', (v) => { expiredHandler });\n        // sync\n        OpenIMEmitter.addListener('onSyncServerStart', syncStartHandler );\n        OpenIMEmitter.addListener('onSyncServerFinish', syncFinishHandler );\n        OpenIMEmitter.addListener('onSyncServerFailed',  syncFailedHandler );\n        // message\n        OpenIMEmitter.addListener('onRecvNewMessage',  newMessageHandler );\n        OpenIMEmitter.addListener('onRecvNewMessages',  newMessageHandler );\n        OpenIMEmitter.addListener('onNewRecvMessageRevoked',revokedMessageHandler );\n        // // conversation\n        OpenIMEmitter.addListener('onConversationChanged', (v) => { conversationChnageHandler });\n        OpenIMEmitter.addListener('onNewConversation', (v) => { newConversationHandler });\n        OpenIMEmitter.addListener('onTotalUnreadMessageCountChanged', (v) => { totalUnreadChangeHandler });\n        // // friend\n        OpenIMEmitter.addListener('onFriendInfoChanged',  friendInfoChangeHandler );\n        OpenIMEmitter.addListener('onFriendAdded', friendAddedHandler );\n        OpenIMEmitter.addListener('onFriendDeleted', (v) => { friendDeletedHandler });\n        // // blacklist\n        OpenIMEmitter.addListener('onBlackAdded', (v) => { blackAddedHandler });\n        OpenIMEmitter.addListener('onBlackDeleted', (v) => { blackDeletedHandler });\n        // // group\n        OpenIMEmitter.addListener('onJoinedGroupAdded', (v) => { joinedGroupAddedHandler });\n        OpenIMEmitter.addListener('onJoinedGroupDeleted', (v) => { joinedGroupDeletedHandler });\n        OpenIMEmitter.addListener('onGroupInfoChanged', (v) => { groupInfoChangedHandler });\n        OpenIMEmitter.addListener('onGroupMemberAdded', (v) => { groupMemberAddedHandler });\n        OpenIMEmitter.addListener('onGroupMemberDeleted', (v) => { groupMemberDeletedHandler });\n        OpenIMEmitter.addListener('onGroupMemberInfoChanged', (v) => { groupMemberInfoChangedHandler });\n        // // application\n        OpenIMEmitter.addListener('onFriendApplicationAdded',  friendApplicationProcessedHandler );\n        OpenIMEmitter.addListener('onFriendApplicationAccepted',  friendApplicationProcessedHandler );\n        OpenIMEmitter.addListener('onFriendApplicationRejected', friendApplicationProcessedHandler );\n        OpenIMEmitter.addListener('onGroupApplicationAdded', (v) => { groupApplicationProcessedHandler });\n        OpenIMEmitter.addListener('onGroupApplicationAccepted', (v) => { groupApplicationProcessedHandler });\n        OpenIMEmitter.addListener('onGroupApplicationRejected', (v) => { groupApplicationProcessedHandler });\n    };\n\n")))}f.isMDXComponent=!0}}]);
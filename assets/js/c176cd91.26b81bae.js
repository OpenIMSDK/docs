"use strict";(self.webpackChunkopenim_docs=self.webpackChunkopenim_docs||[]).push([[31280],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),g=a,f=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},67227:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>u});r(67294);var n=r(3905);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}const c={sidebar_position:2,title:"Callback Example",hide_title:!0},s=void 0,l={unversionedId:"webhooks/example",id:"webhooks/example",title:"Callback Example",description:"Brief Description",source:"@site/i18n/en/docusaurus-plugin-content-docs-restapi/current/webhooks/example.mdx",sourceDirName:"webhooks",slug:"/webhooks/example",permalink:"/restapi/webhooks/example",draft:!1,editUrl:"https://github.com/OpenIMSDK/docs/tree/main/docs/restapi/webhooks/example.mdx",tags:[],version:"current",lastUpdatedAt:1705655831,formattedLastUpdatedAt:"Jan 19, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Callback Example",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Callback Description",permalink:"/restapi/webhooks/introduction"},next:{title:"Callback Before a User Joins a Group",permalink:"/restapi/webhooks/group/applyJoinGroupBefore"}},p={},u=[{value:"<strong>Brief Description</strong>",id:"brief-description",level:3},{value:"Step One: Modify the Configuration File",id:"step-one-modify-the-configuration-file",level:3},{value:"Step Two: Create a Customer Service Account and Get Admin Token",id:"step-two-create-a-customer-service-account-and-get-admin-token",level:3},{value:"Step Three: Write the <strong>afterSendSingleMsg</strong> Interface",id:"step-three-write-the-aftersendsinglemsg-interface",level:3},{value:"Step Four: Experience the Functionality",id:"step-four-experience-the-functionality",level:3}],m={toc:u},g="wrapper";function f(e){var{components:t}=e,c=o(e,["components"]);return(0,n.kt)(g,i(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){a(e,t,r[t])}))}return e}({},m,c),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"brief-description"},(0,n.kt)("strong",{parentName:"h3"},"Brief Description")),(0,n.kt)("p",null,"Implement a customer service chatbot's Q&A functionality using callbacks. This example demonstrates sending a message\uff08Supports sending text messages and picture messages\uff09 to the chatbot and having it return the same message."),(0,n.kt)("h3",{id:"step-one-modify-the-configuration-file"},"Step One: Modify the Configuration File"),(0,n.kt)("p",null,"Modify the config/config.yaml file in open-im-server as per the following template:"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:r(58295).Z,width:"349",height:"271"})),(0,n.kt)("p",null,"Tips:"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"url is the callback URL.")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Enable afterSendSingleMsg by setting it to true.")),(0,n.kt)("h3",{id:"step-two-create-a-customer-service-account-and-get-admin-token"},"Step Two: Create a Customer Service Account and Get Admin Token"),(0,n.kt)("p",null,"After successfully deploying ",(0,n.kt)("strong",{parentName:"p"},"openIM"),", register an openIM account and designate it as the customer service chatbot account. Record its ",(0,n.kt)("strong",{parentName:"p"},"userID")," as ",(0,n.kt)("strong",{parentName:"p"},"robotics"),".\nUse ",(0,n.kt)("strong",{parentName:"p"},"Postman")," or another API testing tool to call the ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"http://xx.xx.xx.xx:10009/account/login"},"http://xx.xx.xx.xx:10009/account/login"))," interface and note down the returned ",(0,n.kt)("strong",{parentName:"p"},"imToken"),"."),(0,n.kt)("h3",{id:"step-three-write-the-aftersendsinglemsg-interface"},"Step Three: Write the ",(0,n.kt)("strong",{parentName:"h3"},"afterSendSingleMsg")," Interface"),(0,n.kt)("p",null,"Here's an example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Go"},'func (m *MessageApi) CallbackExample(c *gin.Context) {\n    // 1. Callback after sending a single chat message\n    var req callbackstruct.CallbackAfterSendSingleMsgReq\n\n    if err := c.BindJSON(&req); err != nil {\n        log.ZError(c, "CallbackExample BindJSON failed", err)\n        apiresp.GinError(c, errs.ErrArgs.WithDetail(err.Error()).Wrap())\n        return\n    }\n\n    resp := callbackstruct.CallbackAfterSendSingleMsgResp{\n        CommonCallbackResp: callbackstruct.CommonCallbackResp{\n            ActionCode: 0,\n            ErrCode:    200,\n            ErrMsg:     "success",\n            ErrDlt:     "successful",\n            NextCode:   0,\n        },\n    }\n    c.JSON(http.StatusOK, resp)\n\n    // 2. If the user receiving the message is a customer service bot, return the message.\n\n    // UserID of the robot account\n    robotics := "5078764102"\n    // Administrator token\n    imtoken := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VySUQiOiJpbUFkbWluIiwiUGxhdGZvcm1JRCI6MTAsImV4cCI6MTcxMzI1MjI0OSwibmJmIjoxNzA1NDc1OTQ5LCJpYXQiOjE3MDU0NzYyNDl9.Zi-uFre8zq6msT3mFOumgcfNKBJ92kTw9ewsKeRVbZ4"\n    if req.SendID == robotics {\n        return\n    }\n    // Processing text messages\n    if req.ContentType == constant.Picture || req.ContentType == constant.Text {\n        user, err := m.userRpcClient.GetUserInfo(c, robotics)\n        if err != nil {\n            log.ZError(c, "CallbackExample get Sender failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n\n        // Handle message structures\n        text := apistruct.TextElem{}\n        picture := apistruct.PictureElem{}\n        mapStruct := make(map[string]any)\n        if req.ContentType == constant.Text {\n            err = json.Unmarshal([]byte(req.Content), &text)\n            if err != nil {\n                log.ZError(c, "CallbackExample unmarshal failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            log.ZDebug(c, "callback", "text", text)\n            mapStruct["content"] = text.Content\n        } else {\n            err = json.Unmarshal([]byte(req.Content), &picture)\n            if err != nil {\n                log.ZError(c, "CallbackExample unmarshal failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            log.ZDebug(c, "callback", "text", picture)\n            if strings.Contains(picture.SourcePicture.Type, "/") {\n                arr := strings.Split(picture.SourcePicture.Type, "/")\n                picture.SourcePicture.Type = arr[1]\n            }\n\n            if strings.Contains(picture.BigPicture.Type, "/") {\n                arr := strings.Split(picture.BigPicture.Type, "/")\n                picture.BigPicture.Type = arr[1]\n            }\n\n            if len(picture.SnapshotPicture.Type) == 0 {\n                picture.SnapshotPicture.Type = picture.SourcePicture.Type\n            }\n\n            mapStructSnap, err := convertStructToMap(picture.SnapshotPicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["snapshotPicture"] = mapStructSnap\n\n            mapStructBig, err := convertStructToMap(picture.BigPicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["bigPicture"] = mapStructBig\n\n            mapStructSource, err := convertStructToMap(picture.SourcePicture)\n            if err != nil {\n                log.ZError(c, "CallbackExample struct to map failed", err)\n                apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n                return\n            }\n            mapStruct["sourcePicture"] = mapStructSource\n            mapStruct["sourcePath"] = picture.SourcePath\n        }\n\n        log.ZDebug(c, "callback", "mapStruct", mapStruct)\n\n        input := &apistruct.SendMsgReq{\n            RecvID: req.SendID,\n            SendMsg: apistruct.SendMsg{\n                SendID:           user.UserID,\n                SenderNickname:   user.Nickname,\n                SenderFaceURL:    user.FaceURL,\n                SenderPlatformID: req.SenderPlatformID,\n                Content:          mapStruct,\n                ContentType:      req.ContentType,\n                SessionType:      req.SessionType,\n                SendTime:         utils.GetCurrentTimestampByMill(), // millisecond\n            },\n        }\n\n        url := "http://127.0.0.1:10002/msg/send_msg"\n        header := make(map[string]string, 2)\n        header["token"] = imtoken\n        type sendResp struct {\n            ErrCode int               `json:"errCode"`\n            ErrMsg  string            `json:"errMsg"`\n            ErrDlt  string            `json:"errDlt"`\n            Data    pbmsg.SendMsgResp `json:"data,omitempty"`\n        }\n\n        output := &sendResp{}\n\n        // Initiate a post request that calls the interface that sends the message (the bot sends a message to user)\n        b, err := http2.Post(c, url, header, input, 10)\n        if err != nil {\n            log.ZError(c, "CallbackExample send message failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        if err = json.Unmarshal(b, output); err != nil {\n            log.ZError(c, "CallbackExample unmarshal failed", err)\n            apiresp.GinError(c, errs.ErrInternalServer.WithDetail(err.Error()).Wrap())\n            return\n        }\n        res := &msg.SendMsgResp{\n            ServerMsgID: output.Data.ServerMsgID,\n            ClientMsgID: output.Data.ClientMsgID,\n            SendTime:    output.Data.SendTime,\n        }\n\n        apiresp.GinSuccess(c, res)\n    }\n}\n\n// struct to map\nfunc convertStructToMap(input interface{}) (map[string]interface{}, error) {\n    result := make(map[string]interface{})\n    inputType := reflect.TypeOf(input)\n\n    inputValue := reflect.ValueOf(input)\n\n    if inputType.Kind() != reflect.Struct {\n        return nil, errs.ErrArgs.Wrap("Input is not a struct")\n    }\n\n    for i := 0; i < inputType.NumField(); i++ {\n        field := inputType.Field(i)\n        fieldValue := inputValue.Field(i)\n\n        mapKey := field.Tag.Get("mapstructure")\n        fmt.Println(mapKey)\n\n        if mapKey == "" {\n            mapKey = field.Name\n        }\n\n        mapKey = strings.ToLower(mapKey)\n\n        result[mapKey] = fieldValue.Interface()\n    }\n\n    return result, nil\n}\n')),(0,n.kt)("p",null,"Tips:"),(0,n.kt)("blockquote",null,(0,n.kt)("ol",{parentName:"blockquote"},(0,n.kt)("li",{parentName:"ol"},"Replace ",(0,n.kt)("strong",{parentName:"li"},"robotics")," in the example with the ",(0,n.kt)("strong",{parentName:"li"},"robotics")," obtained in Step Two."))),(0,n.kt)("blockquote",null,(0,n.kt)("ol",{parentName:"blockquote",start:2},(0,n.kt)("li",{parentName:"ol"},"Replace ",(0,n.kt)("strong",{parentName:"li"},"imToken")," in the example with the ",(0,n.kt)("strong",{parentName:"li"},"imToken")," obtained in Step Two."))),(0,n.kt)("blockquote",null,(0,n.kt)("ol",{parentName:"blockquote",start:3},(0,n.kt)("li",{parentName:"ol"},"Replace ",(0,n.kt)("strong",{parentName:"li"},"url")," in the example with the real ",(0,n.kt)("strong",{parentName:"li"},"url"),"."))),(0,n.kt)("h3",{id:"step-four-experience-the-functionality"},"Step Four: Experience the Functionality"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Search for the customer service chatbot account directly through the userID, then send a message to the chatbot.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:r(73232).Z,width:"441",height:"592"})),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"After the chatbot receives the message, it returns the same message.")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"PC Web Interface",src:r(61433).Z,width:"588",height:"607"})))}f.isMDXComponent=!0},58295:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/config-c8a51d2b07b4a2f6fc5256170d63bf13.png"},61433:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/result-015cb7338598a6182110ee75ccdbb9e8.png"},73232:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/sendMessage-f8bcb35e47896a3dd39d87369780bb8d.png"}}]);